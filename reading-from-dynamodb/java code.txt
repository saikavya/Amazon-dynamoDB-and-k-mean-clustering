


import java.io.BufferedReader;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.model.AttributeDefinition;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ComparisonOperator;
import com.amazonaws.services.dynamodbv2.model.Condition;
import com.amazonaws.services.dynamodbv2.model.CreateTableRequest;
import com.amazonaws.services.dynamodbv2.model.DescribeTableRequest;
import com.amazonaws.services.dynamodbv2.model.GetItemRequest;
import com.amazonaws.services.dynamodbv2.model.GetItemResult;
import com.amazonaws.services.dynamodbv2.model.KeySchemaElement;
import com.amazonaws.services.dynamodbv2.model.KeyType;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
import com.amazonaws.services.dynamodbv2.model.PutItemRequest;
import com.amazonaws.services.dynamodbv2.model.PutItemResult;
import com.amazonaws.services.dynamodbv2.model.ScalarAttributeType;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.amazonaws.services.dynamodbv2.model.TableDescription;
import com.amazonaws.services.dynamodbv2.util.Tables;

public class download {

	@DynamoDBTable(tableName="new1")
    public static class Titanic {
        private String id;
        private String classs;
        private String age;
        private String sex;
        private String survived;
        
        @DynamoDBHashKey(attributeName="id")
        public String getId() { return id; }
        public void setId(String id) { this.id = id; }
        
        @DynamoDBAttribute(attributeName="classs")
        public String getClasss() { return classs; }    
        public void setClasss(String classs) { this.classs = classs; }
        @DynamoDBAttribute(attributeName="age")
        public String getAge() { return age; }    
        public void setAge(String age) { this.age = age; }
        @DynamoDBAttribute(attributeName="sex")
        public String getSex() { return sex; }    
        public void setSex(String sex) { this.sex = sex; }
        @DynamoDBAttribute(attributeName="survived")
        public String getSurvived() { return survived; }    
        public void setSurvived(String survived) { this.survived = survived; }
        
        
        @Override
        public String toString() {
            return   classs+","
            +  age+"," + sex +","+ survived;            
        }
    }
	
    /*
     * WANRNING:
     *      To avoid accidental leakage of your credentials, DO NOT keep
     *      the credentials file in your source directory.
     */

    private static final Map<String, String> Item = null;
	static AmazonDynamoDBClient dynamoDB;

    /**
     * The only information needed to create a client are security credentials
     * consisting of the AWS Access Key ID and Secret Access Key. All other
     * configuration, such as the service endpoints, are performed
     * automatically. Client parameters, such as proxies, can be specified in an
     * optional ClientConfiguration object when constructing a client.
     
     */
    private static void init() throws Exception {
        /*
         * The ProfileCredentialsProvider will return your [default]
         * credential profile by reading from the credentials file located at
         * (C:\\Users\\Administrator\\.aws\\credentials).
         */
        AWSCredentials credentials = null;
        try {
            credentials = new ProfileCredentialsProvider("default").getCredentials();
        } catch (Exception e) {
            throw new AmazonClientException(
                    "Cannot load the credentials from the credential profiles file. " +
                    "Please make sure that your credentials file is at the correct " +
                    "location (C:\\Users\\Administrator\\.aws\\credentials), and is in valid format.",
                    e);
        }
        dynamoDB = new AmazonDynamoDBClient(credentials);
        Region usWest2 = Region.getRegion(Regions.US_WEST_2);
        dynamoDB.setRegion(usWest2);
    }

    public static void main(String[] args) throws Exception {
        init();

       try {
            String tableName = "new1";
            
            HashMap<String,AttributeValue> id = new HashMap<String,AttributeValue>();
				String classs=null;
				String age=null;
				String sex = null;
				String survived=null;
				DynamoDBMapper mapper = new DynamoDBMapper(dynamoDB);
				int num=0;
				PrintWriter writer = new PrintWriter("C:/Users/file/download.txt", "UTF-8");
				while(num<2201)
				{
				Titanic iTitanic = mapper.load(Titanic.class, Integer.toString(num));
                
                 
                 writer.println(iTitanic);
                
                
                 num++;
				}
				 writer.close();
        } catch (AmazonServiceException ase) {
            System.out.println("Caught an AmazonServiceException, which means your request made it "
                    + "to AWS, but was rejected with an error response for some reason.");
            System.out.println("Error Message:    " + ase.getMessage());
            System.out.println("HTTP Status Code: " + ase.getStatusCode());
            System.out.println("AWS Error Code:   " + ase.getErrorCode());
            System.out.println("Error Type:       " + ase.getErrorType());
            System.out.println("Request ID:       " + ase.getRequestId());
        } catch (AmazonClientException ace) {
            System.out.println("Caught an AmazonClientException, which means the client encountered "
                    + "a serious internal problem while trying to communicate with AWS, "
                    + "such as not being able to access the network.");
            System.out.println("Error Message: " + ace.getMessage());
        }
    }

    private static HashMap<String, AttributeValue> newItem(HashMap<String, AttributeValue> id, String classs, String age, String sex, String survived) {
        HashMap<String, AttributeValue> item = new HashMap<String, AttributeValue>();
        item.get("id");
        item.get("classs");
        item.get("age");
        item.get("sex");
        item.get("survived");
        return item;
    }

